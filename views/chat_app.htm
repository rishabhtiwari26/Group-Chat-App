<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat App</title>
</head>
<body>
    <h2>Chat App</h2>
    <p></p>
    <form action="">
        <input type="text" name="userChat" id="userChat">
        <button type="submit" onclick="postChat()">Submit</button>
    </form>
    <ul id="chatUL" class="chatClass">
        
    </ul>
    <script src="https://cdn.jsdelivr.net/npm/axios@1.1.2/dist/axios.min.js"></script>
    <script>
        const userlogin= (localStorage.getItem('token')) ? true: false
        if(userlogin){
            const p=document.createElement('p')
            p.innerText='You joined'
            document.body.append(p)
        }
        else{
            const p=document.createElement('p')
            p.innerText='failed'
            document.body.append(p)
        }
        function postChat(){
            const token = localStorage.getItem('token')
            let obj ={
                chat:document.getElementById('userChat').value
            }
            axios.post('http://localhost:3000/chat/postchat',obj,{headers:{'Authorization':token}}).then(res=>{
            }).catch(e=>{
            })
        }
        
        function initial() {
            const storedChats = retrieveChats();
            let lastChatId
            if(storedChats.length > 0){
                lastChatId =storedChats[storedChats.length - 1].id
            }
            else{
                lastChatId =0
            }
            getNewChats(lastChatId);
        }
        function storeChats(chats) {
            const recentChats = chats.slice(-10);
            localStorage.setItem('chats', JSON.stringify(recentChats));
        }
    
        function retrieveChats() {
            const storedChats = localStorage.getItem('chats');
            return storedChats !== null ? JSON.parse(storedChats) : [];
            
        }

    
        function updateChats(chats) {
            let list = document.getElementById('chatUL');
            list.innerHTML = '';
            chats.forEach(chat => {
                let li = document.createElement('li');
                li.class = 'detailsList';
                let rmvbutton = document.createElement('button');
                rmvbutton.id = 'remove';
                rmvbutton.innerText = 'Remove';
                rmvbutton.addEventListener('click', function () {
                    deleteChat(chat.id);
                });
                li.append(document.createTextNode(chat.userDetail.name + '-'), document.createTextNode(chat.chat + ' '), rmvbutton);
                list.appendChild(li);
            });
        }
    
        async function getNewChats(lastChatId) {
            const token = localStorage.getItem('token');
            const url = 'http://localhost:3000/chat/getchats?lastChatId=' + lastChatId;
            const res= await axios.get(url, { headers: { 'Authorization': token } })
            const storedChats = retrieveChats();
            const newChats = res.data;
            const allChats = storedChats.concat(newChats);
            const recentChats=allChats.slice(-10)
            storeChats(recentChats);
            updateChats(recentChats);
                
        }
    
    
        window.onload = initial;
        setInterval(() => {
            const storedChats = retrieveChats();
            const lastChatId = storedChats.length > 0 ? storedChats[storedChats.length - 1].id : 0;
            getNewChats(lastChatId);
        }, 5000);

            
    </script>
</body>
</html>