<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Group Chat</title>
<style>
  body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
  }

  .container {
    max-width: 800px;
    margin: 20px auto;
    padding: 20px;
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    position: relative;
  }

  h1 {
    text-align: center;
    color: #333;
  }

  #add-member-form {
    display: none;
    position: absolute;
    top: 60px;
    right: 20px;
    padding: 10px;
    background-color: #f9f9f9;
    border: 1px solid #ccc;
    border-radius: 5px;
  }

  #add-member-input {
    width: 200px;
    padding: 10px;
    margin-right: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
    outline: none;
  }

  #add-member-button {
    padding: 10px 20px;
    background-color: #28a745;
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
  }

  #add-member-button:hover {
    background-color: #218838;
  }

  #chat-box {
    border: 1px solid #ccc;
    height: 300px;
    overflow-y: scroll;
    padding: 10px;
    margin-bottom: 20px;
    background-color: #f9f9f9;
    border-radius: 5px;
  }

  #message-input {
    width: calc(100% - 70px);
    padding: 10px;
    margin-right: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
    outline: none;
  }

  #send-button {
    padding: 10px 20px;
    background-color: #007bff;
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
  }

  #send-button:hover {
    background-color: #0056b3;
  }
  .member-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 5px 0;
    border-bottom: 1px solid #ccc;
  }
  
  .button-container {
    display: flex;
    gap: 10px;
  }
  
  .button-container button {
    padding: 5px 10px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .button-container button:hover {
    background-color: #ccc;
  }
  body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
  }
  #logout-button {
    padding: 10px 20px;
    background-color: #dc3545;
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
    position: fixed;
    top: 20px;
    right: 20px;
  }

  #logout-button:hover {
    background-color: #c82333;
  }
  #get-members-button {
    padding: 10px 20px;
    background-color: #007bff;
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
    margin-bottom: 10px; /* Added margin to match other buttons */
}

#get-members-button:hover {
    background-color: #0056b3;
}



</style>
</head>
<body>
  <div class="container">
    <h1 id="heading-h1">Group Chat</h1>
    <button id="add-member-button">Add Member</button>
    <form id="add-member-form">
      <input type="email" id="add-member-input" placeholder="Enter Email ID">
      <button type="submit">Add</button>
    </form>
    <div id="members-list"></div>
    <button id="get-members-button">Get Members</button>
    <div id="chat-box"></div>
    <form id="message-form">
      <input type="text" id="message-input" placeholder="Type your message...">
      <input type="file" id="image-input" accept="image/*">
      <button type="submit" id="send-button">Send</button>
    </form>
    <button id="logout-button">Logout</button>
  </div>

<script src="https://cdn.jsdelivr.net/npm/axios@1.1.2/dist/axios.min.js"></script>
<script src="https://cdn.socket.io/4.7.5/socket.io.min.js"></script>

<script>
  const socket = io('http://localhost:3000', {
      auth: {
          token: localStorage.getItem('token')
      }
  })
  socket.on('group-message', (groupId,lastChatId) => {
    receiveMessage(lastChatId)
})
  const chatBox = document.getElementById('chat-box');
  const messageInput = document.getElementById('message-input');
  const sendButton = document.getElementById('send-button');
  const messageForm = document.getElementById('message-form');
  const addMemberForm = document.getElementById('add-member-form');
  const addMemberInput = document.getElementById('add-member-input');
  const addMemberButton = document.getElementById('add-member-button');
  const membersList = document.getElementById('members-list');
  const getMembersButton = document.getElementById('get-members-button')

  const imageInput = document.getElementById('image-input');

async function sendMessageWithImage(imageFile) {
  try {
    const token = localStorage.getItem('token');
    const formData = new FormData();
    formData.append('image', imageFile); // Append the image file to the FormData

    const groupId = localStorage.getItem('gId');
    const res = await axios.post('http://localhost:3000/chat/post-image', formData, {
      headers: {
        'Authorization': token,
        'gId': groupId,
        'Content-Type': 'multipart/form-data' // Set content type to multipart form data
      }
    });
    if (res.data.success !=false){
      console.log(res)
      const storedChats = retrieveChats();
      let lastChatId;
      if (storedChats.length > 0) {
          lastChatId = storedChats[storedChats.length - 1].id;
      } else {
          lastChatId = 0;
      }
      socket.emit('new-group-message', groupId, lastChatId);
      storeChats([...storedChats, res.data])
      addMessage(res.data.chat,res.data.userDetail.name,true)

    }
    else{
      throw new Error('not able to post')
    }
  } catch (e) {
    console.log(e);
  }
}

  document.getElementById('logout-button').addEventListener('click', function() {
    const confirmLogout = confirm('Are you sure you want to log out?');
    if (confirmLogout) {
      // Clear local storage and redirect to login page
      localStorage.clear();
      window.location.href = 'login.htm';
    }
  });

  getMembersButton.addEventListener('click', () => {
    const gid = localStorage.getItem('gId');
    const token = localStorage.getItem('token');
    const url = 'http://localhost:3000/user/get-all-group-users' + '?gid=' + gid;
    axios.get(url, { headers: { 'Authorization': token } })
        .then(res => {
            console.log(res, 'users');
            displayMembers(res.data.users);
            const loggedInUserEmail = localStorage.getItem('email');
            const isAdmin = res.data.users.find(user => user.email === loggedInUserEmail).isAdmin;
            console.log(isAdmin,'isAdmin')
            showAdminButtons(isAdmin);
        })
        .catch(error => console.error('Error getting members:', error));
});


function displayMembers(members) {
  membersList.innerHTML = '';
  const loggedInUserEmail = localStorage.getItem('email');
  const loggedInUserIsAdmin = members.find(user => user.email === loggedInUserEmail).isAdmin;

  members.forEach(member => {
      const memberItem = document.createElement('div');
      memberItem.classList.add('member-item');
      memberItem.textContent = member.name;

      const buttonContainer = document.createElement('div');
      buttonContainer.classList.add('button-container');

      // If the logged-in user is an admin, show the "Remove" button for all members
      if (loggedInUserIsAdmin) {
          const removeButton = document.createElement('button');
          removeButton.textContent = 'Remove';
          removeButton.onclick = function () {
              removeMember(member.email);
          };
          buttonContainer.appendChild(removeButton);
      }

      // If the logged-in user is an admin and the current member is not an admin, show the "Make Admin" button
      if (loggedInUserIsAdmin && !member.isAdmin) {
          const makeAdminButton = document.createElement('button');
          makeAdminButton.textContent = 'Make Admin';
          makeAdminButton.onclick = function () {
              makeAdmin(member.email);
          };
          buttonContainer.appendChild(makeAdminButton);
      } 
      // If the logged-in user is an admin and the current member is an admin, show the "Remove Admin" button
      else if (loggedInUserIsAdmin && member.isAdmin) {
          const removeAdminButton = document.createElement('button');
          removeAdminButton.textContent = 'Remove Admin';
          removeAdminButton.onclick = function () {
              removeAdmin(member.email);
          };
          buttonContainer.appendChild(removeAdminButton);
      }

      memberItem.appendChild(buttonContainer);
      membersList.appendChild(memberItem);
  });
}

  async function removeMember(email) {
    const gid=localStorage.getItem('gId')
    const token=localStorage.getItem('token')
    const url ='http://localhost:3000/user/remove-user'+'?email='+email
    await axios.delete(url,{headers:{'Authorization':token,'gId':gid}})
      .then(res=>{
        console.log(res)
      }).catch(e=>{
        console.log(e)
      })
  }

  function makeAdmin(email) {
    const gid=localStorage.getItem('gId')
    const token=localStorage.getItem('token')
    const url ='http://localhost:3000/user/make-admin'+'?email='+email
    axios.post(url,{email},{headers:{'Authorization':token,'gId':gid}})
      .then(res=>{
        console.log(res)
      }).catch(e=>{
        console.log(e)
      })
    
  }

  function removeAdmin(email) {
    const gid=localStorage.getItem('gId')
    const token=localStorage.getItem('token')
    const url ='http://localhost:3000/user/remove-admin'+'?email='+email
    axios.post(url,{email},{headers:{'Authorization':token,'gId':gid}})
      .then(res=>{
        console.log(res)
      }).catch(e=>{
        console.log(e)
      })
    console.log('Removing admin from member with ID:', email);
  }

  function addMessage(message, sender, isCurrentUser) {
    const newMessage = document.createElement('div');
    const isAtBottom = chatBox.scrollHeight - chatBox.clientHeight <= chatBox.scrollTop + 1;
    if (isCurrentUser) {
      newMessage.textContent = `You: ${message}`;
    } else {
      newMessage.textContent = `${sender}: ${message}`;
    }
    chatBox.appendChild(newMessage);
    if (isAtBottom) {
      chatBox.scrollTop = chatBox.scrollHeight;
    }

  }
  
  async function sendMessage(message) {
    try {
        const token = localStorage.getItem('token');
        const obj = {
            chat: message
        };
        const groupId = localStorage.getItem('gId');
        const res = await axios.post('http://localhost:3000/chat/postchat', obj, {
            headers: {'Authorization': token, 'gId': groupId}
        });
        if (res.data.success !=false){
          console.log(res)
          const storedChats = retrieveChats();
          let lastChatId;
          if (storedChats.length > 0) {
              lastChatId = storedChats[storedChats.length - 1].id;
          } else {
              lastChatId = 0;
          }
          socket.emit('new-group-message', groupId, lastChatId);
          storeChats([...storedChats, res.data])
          addMessage(res.data.chat,res.data.userDetail.name,true)
          console.log('Sent message:', message);

        }
        else{
          throw new Error('not able to post')
        }
    } catch (e) {
        console.log(e);
    }
}

  async function receiveMessage(lastChatId) {
    try{
      const token = localStorage.getItem('token');
      const groupId=localStorage.getItem('gId')
      const userEmail=localStorage.getItem('email')

      let url = 'http://localhost:3000/chat/getchats?lastChatId=' + lastChatId;
      const res= await axios.get(url, { headers: { 'Authorization': token,'gId':groupId } })
      const storedChats = retrieveChats();
      const newChats = res.data;
      const allChats = storedChats.concat(newChats);
      const recentChats=allChats.slice(-10)
      if (newChats.length>0){
        storeChats(recentChats);
        console.log(newChats,'newChats in recive function')
        newChats.forEach(chat=>{
          const isCurrentUser = chat.userDetail.email === userEmail;
          addMessage(chat.chat, chat.userDetail.name, isCurrentUser);
        })
      }
    }catch(err){
      console.log(err)
    }    
  }
  
  
  addMemberButton.addEventListener('click', function() {
    addMemberForm.style.display = addMemberForm.style.display === 'none' ? 'block' : 'none';
  });
  
  async function addMember(email) {
    const token = localStorage.getItem('token')
    const groupId=localStorage.getItem('gId')
    
    const memberStatus=await axios.post('http://localhost:3000/user/add-member',{email},{ headers: { 'Authorization': token,'gId':groupId } })
    console.log(memberStatus)
  }
  function showAdminButtons(isAdmin) {
    if (isAdmin) {
        document.getElementById('add-member-button').style.display = 'block';
    } else {
        document.getElementById('add-member-button').style.display = 'none';
    }
}
  function initial() {
    const storedChats = retrieveChats();
    const userEmail = localStorage.getItem('email');
    console.log(storedChats,'storeCdhats')
    if(storedChats.length==0){
      return receiveMessage(0)
    }
    storedChats.forEach(chat => {
      const isCurrentUser = chat.userDetail.email === userEmail;
      addMessage(chat.chat, chat.userDetail.name, isCurrentUser);
  })
  }
  function storeChats(chats) {
    const recentChats = chats.slice(-10);
    localStorage.setItem('chats', JSON.stringify(recentChats));
  }
  
  function retrieveChats() {
    const storedChats = localStorage.getItem('chats');
    return storedChats !== null ? JSON.parse(storedChats) : [];
    
  }
  messageForm.addEventListener('submit', async function(event) {
    event.preventDefault();
    const message = messageInput.value.trim();
    const imageFile = imageInput.files[0];

    if (message !== '' && imageFile) {
        alert('Please choose either a message or an image to send, not both.');
        return;
    }

    try {
        if (message !== '') {
            await sendMessage(message)
        } else if (imageFile) {
            await sendMessageWithImage(imageFile);
        }
        messageInput.value = ''; // Clear the message input field
        imageInput.value = ''; // Clear the image input field
    } catch (error) {
        console.error('Error sending message:', error);
    }
});

  addMemberForm.addEventListener('submit', function(event) {
    event.preventDefault();
    const email = addMemberInput.value.trim();
    if (email !== '') {
      
      console.log('Adding member with email:', email);
      addMember(email);
      addMemberInput.value = '';
      addMemberForm.style.display = 'none'; 
    }
  });
  
      
  window.onload = () => {
    document.getElementById('heading-h1').innerText=localStorage.getItem('group-name')
    localStorage.removeItem('group-name')
    initial()
    const gid = localStorage.getItem('gId');
    const token = localStorage.getItem('token');
    const url = 'http://localhost:3000/user/get-all-group-users' + '?gid=' + gid;
    axios.get(url, { headers: { 'Authorization': token } })
        .then(res => {
            const loggedInUserEmail = localStorage.getItem('email');
            const isAdmin = res.data.users.find(user => user.email === loggedInUserEmail).isAdmin;
            showAdminButtons(isAdmin);
        })
        .catch(error => console.error('Error getting user info:', error));

}

    </script>
  </body>
  </html>
  